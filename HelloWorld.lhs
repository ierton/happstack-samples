Happstack представляет собой набор библиотек для создания веб-приложений на языке Haskell. Не вдаваясь в подробности, перейду к содержательной части. 

Вначале несколько объявлений необходимых опций компилятора и используемых модулей.

> {-# OPTIONS_GHC -F -pgmF trhsx #-}
> module HelloWorld where

> import Happstack.Server
> import HSP 
> import Data.Char
> import HSP.ServerPartT

Далее, основная программа.

> main :: IO ()
> main = do
>   let cfg = Conf { validator = Nothing, port = 3333 }
>   simpleHTTP cfg handlerMap

Функция simpleHTTP осуществляет запуск сервера в простейшей (а также, наиболее используемой) конфигурации. В качестве параметров передаём порт 3333. 

В качестве второго аргумента передаётся функция, обрабатывающая запросы пользователей. Её задача - различать GET и POST запросы, получать их параметры и формировать ответ.

> handlerMap :: ServerPartT IO Response
> handlerMap = do
>   xhello <- unXMLGenT (hello "World")
>   makeResponse xhello

> makeResponse = ok . setHeader "Content-Type" "text/html" . toResponse . renderAsHTML

Здесь необходимо пояснение. Начнем с типа. Функция должна вернуть монаду ServerPartT IO, содержащую Response. Response - это тот самый ответ пользователю, который мы должны вернуть. В простейшем случае он состоит из заголовков и тела (HTML кода). Первая строчка функции (xhello <- ...) создает HTML (точнее, XML). Вторая - "добавляет" в него поля заголовков.

TODO: Написать про монаду

Теперь дело за малым - сгенерировать  HTML код. Задача на первый взгляд очень проста, однако люди решают её совершенно разными методами, периодически создавая новые. Существует большое количесвто инструментов, использующих загружаемые шаблоны (подход PHP, Java template library). Существуют специальные "переходные" языки (например, ). Авторы некоторых приложений переносят эту задачу на пользователя, применяя JavaScript-библиотеки, подобные (TODO: проверить Mustache). 

В данном примере используется другой подход: с помощью специального расширения ghc (обратите внимание на строку OPTIONS_GHC в начале файла), в синтаксис Haskell добавляется поддержка XML, что позволяет с одной стороны максимально укоротить код приложения, а с другой - воспользоваться преимуществами статической проверки типов при подстановке параметров. 

> hello :: String -> XMLGenT (ServerPartT IO) XML
> hello noun =
>     <html>
>      <head>
>       <title>Hello, <% noun %></title>
>      </head>
>      <body>
>       <p>Hello, <% map toUpper noun %></p>
>      </body>
>     </html>

Всё, программа готова. Для запуска достаточно выполнить команду

ghci HelloWorld.lhs
main

TODO: Добавить ссылки на источники (блог про HSP)


